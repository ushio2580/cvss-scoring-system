import React, { useState, useEffect } from 'react';
import { useQuery } from '@tanstack/react-query';
import { useParams, useNavigate } from 'react-router-dom';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Badge } from '@/components/ui/badge';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Pagination, PaginationContent, PaginationItem, PaginationLink, PaginationNext, PaginationPrevious } from '@/components/ui/pagination';
import { Calendar, Download, Filter, ArrowLeft, Eye, Plus, Minus, Edit, Trash2 } from 'lucide-react';
import { apiService } from '@/services/api';
import { toast } from 'sonner';

interface VulnerabilityHistoryEntry {
  id: number;
  vulnerability_id: number;
  user_id: number | null;
  username: string;
  action: string;
  field_name: string | null;
  old_value: string | null;
  new_value: string | null;
  timestamp: string;
  ip_address: string | null;
  user_agent: string | null;
}

interface Vulnerability {
  id: number;
  title: string;
  description: string;
  severity: string;
  status: string;
  source: string;
  created_at: string;
  updated_at: string;
}

interface HistorySummary {
  vulnerability: Vulnerability;
  period: {
    start_date: string;
    end_date: string;
    days: number;
  };
  statistics: {
    total_changes: number;
    unique_actions: number;
    unique_fields: number;
    unique_users: number;
  };
  top_actions: Array<{ action: string; count: number }>;
  top_fields: Array<{ field: string; count: number }>;
  top_users: Array<{ username: string; count: number }>;
}

interface PaginationInfo {
  page: number;
  per_page: number;
  total: number;
  pages: number;
  has_next: boolean;
  has_prev: boolean;
}

export default function VulnerabilityHistory() {
  const { vulnId } = useParams<{ vulnId: string }>();
  const navigate = useNavigate();
  
  const [filters, setFilters] = useState({
    action: '',
    field_name: '',
    username: '',
    start_date: '',
    end_date: '',
    page: 1,
    per_page: 50
  });

  const [availableFilters, setAvailableFilters] = useState({
    actions: [],
    field_names: [],
    usernames: []
  });

  // Fetch available filter options
  const { data: filterOptions } = useQuery({
    queryKey: ['vulnerability-history-filters', vulnId],
    queryFn: async () => {
      return await apiService.getVulnerabilityHistoryFilters(parseInt(vulnId!));
    },
    enabled: !!vulnId
  });

  // Fetch vulnerability history
  const { data: historyData, isLoading, error } = useQuery({
    queryKey: ['vulnerability-history', vulnId, filters],
    queryFn: async () => {
      return await apiService.getVulnerabilityHistory(parseInt(vulnId!), filters);
    },
    enabled: !!vulnId
  });

  // Fetch history summary
  const { data: summaryData } = useQuery({
    queryKey: ['vulnerability-history-summary', vulnId],
    queryFn: async () => {
      return await apiService.getVulnerabilityHistorySummary(parseInt(vulnId!), 30);
    },
    enabled: !!vulnId
  });

  useEffect(() => {
    if (filterOptions) {
      setAvailableFilters(filterOptions);
    }
  }, [filterOptions]);

  const handleFilterChange = (key: string, value: string) => {
    const backendValue = value === 'all' ? '' : value;
    setFilters(prev => ({
      ...prev,
      [key]: backendValue,
      page: 1
    }));
  };

  const handlePageChange = (page: number) => {
    setFilters(prev => ({ ...prev, page }));
  };

  const exportHistory = async () => {
    try {
      const exportFilters = { ...filters };
      const { page, per_page, ...filtersForExport } = exportFilters;

      const blob = await apiService.exportVulnerabilityHistory(parseInt(vulnId!), filtersForExport);
      const url = window.URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.setAttribute('download', `vulnerability_${vulnId}_history_${new Date().toISOString().split('T')[0]}.csv`);
      document.body.appendChild(link);
      link.click();
      link.remove();
      window.URL.revokeObjectURL(url);

      toast.success('Vulnerability history exported successfully');
    } catch (error) {
      toast.error('Failed to export vulnerability history');
    }
  };

  const formatTimestamp = (timestamp: string) => {
    return new Date(timestamp).toLocaleString();
  };

  const getActionColor = (action: string) => {
    const colors = {
      'CREATE': 'bg-green-100 text-green-800',
      'UPDATE': 'bg-blue-100 text-blue-800',
      'DELETE': 'bg-red-100 text-red-800'
    };
    return colors[action as keyof typeof colors] || 'bg-gray-100 text-gray-800';
  };

  const getActionIcon = (action: string) => {
    switch (action) {
      case 'CREATE':
        return <Plus className="h-3 w-3" />;
      case 'UPDATE':
        return <Edit className="h-3 w-3" />;
      case 'DELETE':
        return <Trash2 className="h-3 w-3" />;
      default:
        return <Eye className="h-3 w-3" />;
    }
  };

  const formatFieldName = (fieldName: string) => {
    return fieldName.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
  };

  if (error) {
    return (
      <div className="container mx-auto p-6">
        <Card>
          <CardContent className="p-6">
            <div className="flex items-center justify-center text-red-600">
              <span>Error loading vulnerability history</span>
            </div>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="container mx-auto p-6 space-y-6">
      <div className="flex justify-between items-center">
        <div className="flex items-center gap-4">
          <Button 
            variant="outline" 
            onClick={() => navigate('/vulnerabilities')}
            className="flex items-center gap-2"
          >
            <ArrowLeft className="h-4 w-4" />
            Back to Vulnerabilities
          </Button>
          <div>
            <h1 className="text-3xl font-bold">Vulnerability History</h1>
            {historyData?.vulnerability && (
              <p className="text-muted-foreground">{historyData.vulnerability.title}</p>
            )}
          </div>
        </div>
        <Button onClick={exportHistory} className="flex items-center gap-2">
          <Download className="h-4 w-4" />
          Export CSV
        </Button>
      </div>

      {/* Summary Cards */}
      {summaryData && (
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
          <Card>
            <CardContent className="p-4">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-muted-foreground">Total Changes</p>
                  <p className="text-2xl font-bold">{summaryData.statistics.total_changes}</p>
                </div>
                <Calendar className="h-8 w-8 text-blue-600" />
              </div>
            </CardContent>
          </Card>
          
          <Card>
            <CardContent className="p-4">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-muted-foreground">Unique Actions</p>
                  <p className="text-2xl font-bold">{summaryData.statistics.unique_actions}</p>
                </div>
                <Edit className="h-8 w-8 text-green-600" />
              </div>
            </CardContent>
          </Card>
          
          <Card>
            <CardContent className="p-4">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-muted-foreground">Fields Modified</p>
                  <p className="text-2xl font-bold">{summaryData.statistics.unique_fields}</p>
                </div>
                <Filter className="h-8 w-8 text-purple-600" />
              </div>
            </CardContent>
          </Card>
          
          <Card>
            <CardContent className="p-4">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-muted-foreground">Users Involved</p>
                  <p className="text-2xl font-bold">{summaryData.statistics.unique_users}</p>
                </div>
                <Eye className="h-8 w-8 text-orange-600" />
              </div>
            </CardContent>
          </Card>
        </div>
      )}

      {/* Filters */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Filter className="h-5 w-5" />
            Filters
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-3 lg:grid-cols-5 gap-4">
            <div>
              <Label htmlFor="action">Action</Label>
              <Select value={filters.action || 'all'} onValueChange={(value) => handleFilterChange('action', value)}>
                <SelectTrigger>
                  <SelectValue placeholder="All actions" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">All actions</SelectItem>
                  {availableFilters.actions.map((action: string) => (
                    <SelectItem key={action} value={action}>{action}</SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            <div>
              <Label htmlFor="field_name">Field</Label>
              <Select value={filters.field_name || 'all'} onValueChange={(value) => handleFilterChange('field_name', value)}>
                <SelectTrigger>
                  <SelectValue placeholder="All fields" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">All fields</SelectItem>
                  {availableFilters.field_names.map((field: string) => (
                    <SelectItem key={field} value={field}>{formatFieldName(field)}</SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            <div>
              <Label htmlFor="username">User</Label>
              <Select value={filters.username || 'all'} onValueChange={(value) => handleFilterChange('username', value)}>
                <SelectTrigger>
                  <SelectValue placeholder="All users" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">All users</SelectItem>
                  {availableFilters.usernames.map((username: string) => (
                    <SelectItem key={username} value={username}>{username}</SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            <div>
              <Label htmlFor="start_date">Start Date</Label>
              <Input
                type="date"
                value={filters.start_date}
                onChange={(e) => handleFilterChange('start_date', e.target.value)}
              />
            </div>

            <div>
              <Label htmlFor="end_date">End Date</Label>
              <Input
                type="date"
                value={filters.end_date}
                onChange={(e) => handleFilterChange('end_date', e.target.value)}
              />
            </div>
          </div>
        </CardContent>
      </Card>

      {/* History Table */}
      <Card>
        <CardHeader>
          <CardTitle>Change History</CardTitle>
        </CardHeader>
        <CardContent>
          {isLoading ? (
            <div className="flex items-center justify-center p-8">
              <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
            </div>
          ) : (
            <>
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Timestamp</TableHead>
                    <TableHead>User</TableHead>
                    <TableHead>Action</TableHead>
                    <TableHead>Field</TableHead>
                    <TableHead>Old Value</TableHead>
                    <TableHead>New Value</TableHead>
                    <TableHead>IP Address</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {historyData?.history?.map((entry: VulnerabilityHistoryEntry) => (
                    <TableRow key={entry.id}>
                      <TableCell className="font-mono text-sm">
                        {formatTimestamp(entry.timestamp)}
                      </TableCell>
                      <TableCell>
                        <span className="font-medium">{entry.username}</span>
                      </TableCell>
                      <TableCell>
                        <Badge className={getActionColor(entry.action)}>
                          <div className="flex items-center gap-1">
                            {getActionIcon(entry.action)}
                            {entry.action}
                          </div>
                        </Badge>
                      </TableCell>
                      <TableCell>
                        {entry.field_name ? (
                          <Badge variant="outline">
                            {formatFieldName(entry.field_name)}
                          </Badge>
                        ) : (
                          <span className="text-muted-foreground">-</span>
                        )}
                      </TableCell>
                      <TableCell className="max-w-xs">
                        <div className="truncate">
                          {entry.old_value ? (
                            <span className="text-sm bg-red-50 dark:bg-red-900/20 px-2 py-1 rounded">
                              {entry.old_value}
                            </span>
                          ) : (
                            <span className="text-muted-foreground">-</span>
                          )}
                        </div>
                      </TableCell>
                      <TableCell className="max-w-xs">
                        <div className="truncate">
                          {entry.new_value ? (
                            <span className="text-sm bg-green-50 dark:bg-green-900/20 px-2 py-1 rounded">
                              {entry.new_value}
                            </span>
                          ) : (
                            <span className="text-muted-foreground">-</span>
                          )}
                        </div>
                      </TableCell>
                      <TableCell className="font-mono text-sm">
                        {entry.ip_address || '-'}
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>

              {/* Pagination */}
              {historyData?.pagination && (
                <div className="mt-4">
                  <Pagination>
                    <PaginationContent>
                      <PaginationItem>
                        <PaginationPrevious 
                          onClick={() => handlePageChange(historyData.pagination.page - 1)}
                          className={!historyData.pagination.has_prev ? 'pointer-events-none opacity-50' : 'cursor-pointer'}
                        />
                      </PaginationItem>
                      
                      {Array.from({ length: historyData.pagination.pages }, (_, i) => i + 1).map((page) => (
                        <PaginationItem key={page}>
                          <PaginationLink
                            onClick={() => handlePageChange(page)}
                            isActive={page === historyData.pagination.page}
                            className="cursor-pointer"
                          >
                            {page}
                          </PaginationLink>
                        </PaginationItem>
                      ))}
                      
                      <PaginationItem>
                        <PaginationNext 
                          onClick={() => handlePageChange(historyData.pagination.page + 1)}
                          className={!historyData.pagination.has_next ? 'pointer-events-none opacity-50' : 'cursor-pointer'}
                        />
                      </PaginationItem>
                    </PaginationContent>
                  </Pagination>
                  
                  <div className="text-center text-sm text-muted-foreground mt-2">
                    Showing {((historyData.pagination.page - 1) * historyData.pagination.per_page) + 1} to{' '}
                    {Math.min(historyData.pagination.page * historyData.pagination.per_page, historyData.pagination.total)} of{' '}
                    {historyData.pagination.total} entries
                  </div>
                </div>
              )}
            </>
          )}
        </CardContent>
      </Card>
    </div>
  );
}
