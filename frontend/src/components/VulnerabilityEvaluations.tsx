import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Separator } from '@/components/ui/separator';
import { 
  Plus, 
  Edit, 
  Trash2, 
  Calendar, 
  User, 
  TrendingUp,
  AlertTriangle,
  CheckCircle,
  Clock
} from 'lucide-react';
import { apiService } from '@/services/api';
import { toast } from 'sonner';
import { CreateEvaluationModal } from './CreateEvaluationModal';
import { EditEvaluationModal } from './EditEvaluationModal';

interface Evaluation {
  id: number;
  vuln_id: number;
  metrics: any;
  base_score: number;
  temporal_score?: number;
  environmental_score?: number;
  author_id: number;
  author_name: string;
  created_at: string;
  updated_at: string;
}

interface VulnerabilityEvaluationsProps {
  vulnId: number;
  onEvaluationCreated?: () => void;
}

export const VulnerabilityEvaluations: React.FC<VulnerabilityEvaluationsProps> = ({
  vulnId,
  onEvaluationCreated
}) => {
  const [evaluations, setEvaluations] = useState<Evaluation[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);
  const [isEditModalOpen, setIsEditModalOpen] = useState(false);
  const [selectedEvaluation, setSelectedEvaluation] = useState<Evaluation | null>(null);

  const fetchEvaluations = async () => {
    try {
      setLoading(true);
      const response = await apiService.getVulnerabilityEvaluations(vulnId);
      if (response.success) {
        setEvaluations(response.evaluations);
      } else {
        setError(response.message || 'Failed to fetch evaluations');
      }
    } catch (error) {
      console.error('Error fetching evaluations:', error);
      setError('Failed to fetch evaluations');
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchEvaluations();
  }, [vulnId]);

  const handleCreateEvaluation = async (evaluationData: any) => {
    try {
      const response = await apiService.createEvaluation(vulnId, evaluationData);
      // Check if response has message (success) or error
      if (response.message) {
        toast.success(response.message || 'Evaluation created successfully!');
        setIsCreateModalOpen(false);
        fetchEvaluations();
        onEvaluationCreated?.();
      } else if ((response as any).error) {
        toast.error((response as any).error || 'Failed to create evaluation');
      } else {
        // If no message or error, assume success
        toast.success('Evaluation created successfully!');
        setIsCreateModalOpen(false);
        fetchEvaluations();
        onEvaluationCreated?.();
      }
    } catch (error) {
      console.error('Error creating evaluation:', error);
      toast.error('Failed to create evaluation');
    }
  };

  const handleEditEvaluation = async (evaluationId: number, evaluationData: any) => {
    try {
      const response = await apiService.updateEvaluation(evaluationId, evaluationData);
      if (response.message) {
        toast.success(response.message || 'Evaluation updated successfully!');
        setIsEditModalOpen(false);
        setSelectedEvaluation(null);
        fetchEvaluations();
      } else if ((response as any).error) {
        toast.error((response as any).error || 'Failed to update evaluation');
      } else {
        toast.success('Evaluation updated successfully!');
        setIsEditModalOpen(false);
        setSelectedEvaluation(null);
        fetchEvaluations();
      }
    } catch (error) {
      console.error('Error updating evaluation:', error);
      toast.error('Failed to update evaluation');
    }
  };

  const handleDeleteEvaluation = async (evaluationId: number) => {
    if (!confirm('Are you sure you want to delete this evaluation?')) {
      return;
    }

    try {
      const response = await apiService.deleteEvaluation(evaluationId);
      if (response.message) {
        toast.success(response.message || 'Evaluation deleted successfully!');
        fetchEvaluations();
      } else if ((response as any).error) {
        toast.error((response as any).error || 'Failed to delete evaluation');
      } else {
        toast.success('Evaluation deleted successfully!');
        fetchEvaluations();
      }
    } catch (error) {
      console.error('Error deleting evaluation:', error);
      toast.error('Failed to delete evaluation');
    }
  };

  const getScoreColor = (score: number) => {
    if (score >= 9.0) return 'bg-red-500 text-white';
    if (score >= 7.0) return 'bg-orange-500 text-white';
    if (score >= 4.0) return 'bg-yellow-500 text-black';
    return 'bg-green-500 text-white';
  };

  const getScoreSeverity = (score: number) => {
    if (score >= 9.0) return 'Critical';
    if (score >= 7.0) return 'High';
    if (score >= 4.0) return 'Medium';
    return 'Low';
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  if (loading) {
    return (
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <TrendingUp className="h-5 w-5" />
            CVSS Evaluations
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="flex items-center justify-center py-8">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
          </div>
        </CardContent>
      </Card>
    );
  }

  if (error) {
    return (
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <TrendingUp className="h-5 w-5" />
            CVSS Evaluations
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="flex items-center justify-center py-8 text-center">
            <div>
              <AlertTriangle className="h-12 w-12 text-destructive mx-auto mb-4" />
              <p className="text-muted-foreground">{error}</p>
              <Button 
                variant="outline" 
                onClick={fetchEvaluations}
                className="mt-4"
              >
                Try Again
              </Button>
            </div>
          </div>
        </CardContent>
      </Card>
    );
  }

  return (
    <>
      <Card>
        <CardHeader>
          <div className="flex items-center justify-between">
            <CardTitle className="flex items-center gap-2">
              <TrendingUp className="h-5 w-5" />
              CVSS Evaluations
              <Badge variant="secondary">{evaluations.length}</Badge>
            </CardTitle>
            <Button onClick={() => setIsCreateModalOpen(true)}>
              <Plus className="h-4 w-4 mr-2" />
              Add Evaluation
            </Button>
          </div>
        </CardHeader>
        <CardContent>
          {evaluations.length === 0 ? (
            <div className="text-center py-8">
              <Clock className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
              <h3 className="text-lg font-semibold mb-2">No Evaluations Yet</h3>
              <p className="text-muted-foreground mb-4">
                Create the first CVSS evaluation for this vulnerability to track its severity over time.
              </p>
              <Button onClick={() => setIsCreateModalOpen(true)}>
                <Plus className="h-4 w-4 mr-2" />
                Create First Evaluation
              </Button>
            </div>
          ) : (
            <div className="space-y-4">
              {evaluations.map((evaluation, index) => (
                <motion.div
                  key={evaluation.id}
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: index * 0.1 }}
                >
                  <Card className="border-l-4 border-l-primary">
                    <CardContent className="p-4">
                      <div className="flex items-start justify-between">
                        <div className="flex-1">
                          <div className="flex items-center gap-4 mb-3">
                            <div className="flex items-center gap-2">
                              <Badge className={getScoreColor(evaluation.base_score)}>
                                {evaluation.base_score.toFixed(1)}
                              </Badge>
                              <span className="text-sm font-medium">
                                {getScoreSeverity(evaluation.base_score)}
                              </span>
                            </div>
                            {evaluation.temporal_score && (
                              <div className="flex items-center gap-2">
                                <span className="text-sm text-muted-foreground">Temporal:</span>
                                <Badge variant="outline">
                                  {evaluation.temporal_score.toFixed(1)}
                                </Badge>
                              </div>
                            )}
                            {evaluation.environmental_score && (
                              <div className="flex items-center gap-2">
                                <span className="text-sm text-muted-foreground">Environmental:</span>
                                <Badge variant="outline">
                                  {evaluation.environmental_score.toFixed(1)}
                                </Badge>
                              </div>
                            )}
                          </div>
                          
                          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm text-muted-foreground">
                            <div className="flex items-center gap-2">
                              <User className="h-4 w-4" />
                              <span>{evaluation.author_name}</span>
                            </div>
                            <div className="flex items-center gap-2">
                              <Calendar className="h-4 w-4" />
                              <span>{formatDate(evaluation.created_at)}</span>
                            </div>
                            <div className="flex items-center gap-2">
                              <CheckCircle className="h-4 w-4" />
                              <span>Evaluation #{evaluation.id}</span>
                            </div>
                          </div>
                        </div>
                        
                        <div className="flex items-center gap-2">
                          <Button
                            variant="ghost"
                            size="sm"
                            onClick={() => {
                              setSelectedEvaluation(evaluation);
                              setIsEditModalOpen(true);
                            }}
                          >
                            <Edit className="h-4 w-4" />
                          </Button>
                          <Button
                            variant="ghost"
                            size="sm"
                            onClick={() => handleDeleteEvaluation(evaluation.id)}
                          >
                            <Trash2 className="h-4 w-4" />
                          </Button>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                </motion.div>
              ))}
            </div>
          )}
        </CardContent>
      </Card>

      <CreateEvaluationModal
        isOpen={isCreateModalOpen}
        onClose={() => setIsCreateModalOpen(false)}
        onSubmit={handleCreateEvaluation}
        vulnId={vulnId}
      />

      <EditEvaluationModal
        isOpen={isEditModalOpen}
        onClose={() => {
          setIsEditModalOpen(false);
          setSelectedEvaluation(null);
        }}
        onSubmit={handleEditEvaluation}
        evaluation={selectedEvaluation}
      />
    </>
  );
};
