import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
import { motion, AnimatePresence } from 'framer-motion';
import { X, Plus, AlertTriangle } from 'lucide-react';
import { apiService } from '@/services/api';
import { toast } from 'sonner';

interface AddVulnerabilityModalProps {
  isOpen: boolean;
  onClose: () => void;
  onSuccess: () => void;
}

interface VulnerabilityForm {
  title: string;
  cve_id: string;
  description: string;
  severity: 'Critical' | 'High' | 'Medium' | 'Low';
  status: 'Open' | 'Mitigating' | 'Fixed' | 'Accepted';
  source: 'internal' | 'nvd' | 'other';
  vector: string;
}

export const AddVulnerabilityModal: React.FC<AddVulnerabilityModalProps> = ({
  isOpen,
  onClose,
  onSuccess
}) => {
  const [form, setForm] = useState<VulnerabilityForm>({
    title: '',
    cve_id: '',
    description: '',
    severity: 'Medium',
    status: 'Open',
    source: 'internal',
    vector: ''
  });

  const [isSubmitting, setIsSubmitting] = useState(false);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsSubmitting(true);

    let loadingToast: string | number | undefined;
    try {
      loadingToast = toast.loading('Creating vulnerability...');
      await apiService.createVulnerability(form);
      toast.dismiss(loadingToast);
      onSuccess();
      onClose();
      // Reset form
      setForm({
        title: '',
        cve_id: '',
        description: '',
        severity: 'Medium',
        status: 'Open',
        source: 'internal',
        vector: ''
      });
    } catch (error) {
      console.error('Failed to create vulnerability:', error);
      if (loadingToast) toast.dismiss(loadingToast);
      toast.error('Failed to create vulnerability. Please try again.');
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleInputChange = (field: keyof VulnerabilityForm, value: string) => {
    setForm(prev => ({ ...prev, [field]: value }));
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'Critical': return 'bg-red-500 text-white';
      case 'High': return 'bg-orange-500 text-white';
      case 'Medium': return 'bg-yellow-500 text-black';
      case 'Low': return 'bg-green-500 text-white';
      default: return 'bg-gray-500 text-white';
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'Open': return 'bg-blue-500 text-white';
      case 'Mitigating': return 'bg-orange-500 text-white';
      case 'Fixed': return 'bg-green-500 text-white';
      case 'Accepted': return 'bg-gray-500 text-white';
      default: return 'bg-gray-500 text-white';
    }
  };

  return (
    <AnimatePresence>
      {isOpen && (
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4"
          onClick={onClose}
        >
          <motion.div
            initial={{ scale: 0.95, opacity: 0 }}
            animate={{ scale: 1, opacity: 1 }}
            exit={{ scale: 0.95, opacity: 0 }}
            className="w-full max-w-2xl max-h-[90vh] overflow-y-auto"
            onClick={(e) => e.stopPropagation()}
          >
            <Card className="glass">
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-4">
                <CardTitle className="flex items-center gap-2">
                  <Plus className="h-5 w-5" />
                  Add New Vulnerability
                </CardTitle>
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={onClose}
                  className="h-8 w-8 p-0"
                >
                  <X className="h-4 w-4" />
                </Button>
              </CardHeader>
              <CardContent>
                <form onSubmit={handleSubmit} className="space-y-6">
                  {/* Title */}
                  <div className="space-y-2">
                    <label className="text-sm font-medium">Title *</label>
                    <Input
                      value={form.title}
                      onChange={(e) => handleInputChange('title', e.target.value)}
                      placeholder="e.g., SQL Injection in Login Form"
                      required
                    />
                  </div>

                  {/* CVE ID */}
                  <div className="space-y-2">
                    <label className="text-sm font-medium">CVE ID</label>
                    <Input
                      value={form.cve_id}
                      onChange={(e) => handleInputChange('cve_id', e.target.value)}
                      placeholder="e.g., CVE-2024-0001"
                    />
                  </div>

                  {/* Description */}
                  <div className="space-y-2">
                    <label className="text-sm font-medium">Description</label>
                    <textarea
                      value={form.description}
                      onChange={(e) => handleInputChange('description', e.target.value)}
                      placeholder="Describe the vulnerability..."
                      className="w-full p-3 border rounded-md bg-background min-h-[100px] resize-vertical"
                    />
                  </div>

                  {/* Severity and Status */}
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div className="space-y-2">
                      <label className="text-sm font-medium">Severity</label>
                      <select
                        value={form.severity}
                        onChange={(e) => handleInputChange('severity', e.target.value)}
                        className="w-full p-3 border rounded-md bg-background"
                      >
                        <option value="Critical">Critical</option>
                        <option value="High">High</option>
                        <option value="Medium">Medium</option>
                        <option value="Low">Low</option>
                      </select>
                    </div>
                    <div className="space-y-2">
                      <label className="text-sm font-medium">Status</label>
                      <select
                        value={form.status}
                        onChange={(e) => handleInputChange('status', e.target.value)}
                        className="w-full p-3 border rounded-md bg-background"
                      >
                        <option value="Open">Open</option>
                        <option value="Mitigating">Mitigating</option>
                        <option value="Fixed">Fixed</option>
                        <option value="Accepted">Accepted</option>
                      </select>
                    </div>
                  </div>

                  {/* Source and Vector */}
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div className="space-y-2">
                      <label className="text-sm font-medium">Source</label>
                      <select
                        value={form.source}
                        onChange={(e) => handleInputChange('source', e.target.value)}
                        className="w-full p-3 border rounded-md bg-background"
                      >
                        <option value="internal">Internal</option>
                        <option value="nvd">NVD</option>
                        <option value="other">Other</option>
                      </select>
                    </div>
                    <div className="space-y-2">
                      <label className="text-sm font-medium">CVSS Vector</label>
                      <Input
                        value={form.vector}
                        onChange={(e) => handleInputChange('vector', e.target.value)}
                        placeholder="CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H"
                      />
                      <div className="text-xs text-muted-foreground space-y-1">
                        <p><strong>Format:</strong> CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H</p>
                        <p><strong>Also accepts:</strong> CVSS:AV:N/AC:L/... or AV:N/AC:L/...</p>
                        <p><strong>Example:</strong> CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H (Critical SQL Injection)</p>
                      </div>
                    </div>
                  </div>

                  {/* Preview */}
                  <div className="space-y-2">
                    <label className="text-sm font-medium">Preview</label>
                    <div className="p-4 border rounded-md bg-muted/20">
                      <div className="flex items-center justify-between mb-2">
                        <h3 className="font-medium">{form.title || 'Vulnerability Title'}</h3>
                        <div className="flex gap-2">
                          <Badge className={getSeverityColor(form.severity)}>
                            {form.severity}
                          </Badge>
                          <Badge className={getStatusColor(form.status)}>
                            {form.status}
                          </Badge>
                        </div>
                      </div>
                      {form.cve_id && (
                        <p className="text-sm text-muted-foreground mb-2">
                          {form.cve_id}
                        </p>
                      )}
                      {form.description && (
                        <p className="text-sm">{form.description}</p>
                      )}
                    </div>
                  </div>

                  {/* Actions */}
                  <div className="flex justify-end space-x-3 pt-4">
                    <Button
                      type="button"
                      variant="outline"
                      onClick={onClose}
                      disabled={isSubmitting}
                    >
                      Cancel
                    </Button>
                    <Button
                      type="submit"
                      disabled={isSubmitting || !form.title}
                      className="flex items-center gap-2"
                    >
                      {isSubmitting ? (
                        <>
                          <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                          Creating...
                        </>
                      ) : (
                        <>
                          <Plus className="h-4 w-4" />
                          Create Vulnerability
                        </>
                      )}
                    </Button>
                  </div>
                </form>
              </CardContent>
            </Card>
          </motion.div>
        </motion.div>
      )}
    </AnimatePresence>
  );
};
