import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
import { motion, AnimatePresence } from 'framer-motion';
import { X, Save, AlertTriangle } from 'lucide-react';
import { apiService } from '@/services/api';
import { toast } from 'sonner';
import { Vulnerability } from '@/types';

interface EditVulnerabilityModalProps {
  isOpen: boolean;
  onClose: () => void;
  onSuccess: () => void;
  vulnerability: Vulnerability | null;
}

interface VulnerabilityForm {
  title: string;
  cve_id: string;
  description: string;
  severity: 'Critical' | 'High' | 'Medium' | 'Low';
  status: 'Open' | 'Mitigating' | 'Fixed' | 'Accepted';
  source: 'internal' | 'nvd' | 'other';
  vector: string;
}

export const EditVulnerabilityModal: React.FC<EditVulnerabilityModalProps> = ({
  isOpen,
  onClose,
  onSuccess,
  vulnerability
}) => {
  const [form, setForm] = useState<VulnerabilityForm>({
    title: '',
    cve_id: '',
    description: '',
    severity: 'Medium',
    status: 'Open',
    source: 'internal',
    vector: ''
  });

  const [isSubmitting, setIsSubmitting] = useState(false);

  // Update form when vulnerability changes
  useEffect(() => {
    if (vulnerability) {
      setForm({
        title: vulnerability.title,
        cve_id: vulnerability.cve_id || '',
        description: vulnerability.description || '',
        severity: vulnerability.severity as 'Critical' | 'High' | 'Medium' | 'Low',
        status: vulnerability.status as 'Open' | 'Mitigating' | 'Fixed' | 'Accepted',
        source: vulnerability.source as 'internal' | 'nvd' | 'other',
        vector: vulnerability.vector || ''
      });
    }
  }, [vulnerability]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!vulnerability) return;
    
    setIsSubmitting(true);

    let loadingToast: string | number | undefined;
    try {
      loadingToast = toast.loading('Updating vulnerability...');
      await apiService.updateVulnerability(vulnerability.id, form);
      toast.dismiss(loadingToast);
      onSuccess();
      onClose();
    } catch (error) {
      console.error('Failed to update vulnerability:', error);
      if (loadingToast) toast.dismiss(loadingToast);
      toast.error('Failed to update vulnerability. Please try again.');
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleInputChange = (field: keyof VulnerabilityForm, value: string) => {
    setForm(prev => ({ ...prev, [field]: value }));
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'Critical': return 'bg-red-500 text-white';
      case 'High': return 'bg-orange-500 text-white';
      case 'Medium': return 'bg-yellow-500 text-black';
      case 'Low': return 'bg-green-500 text-white';
      default: return 'bg-gray-500 text-white';
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'Open': return 'bg-blue-500 text-white';
      case 'Mitigating': return 'bg-orange-500 text-white';
      case 'Fixed': return 'bg-green-500 text-white';
      case 'Accepted': return 'bg-gray-500 text-white';
      default: return 'bg-gray-500 text-white';
    }
  };

  if (!vulnerability) return null;

  return (
    <AnimatePresence>
      {isOpen && (
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4"
          onClick={onClose}
        >
          <motion.div
            initial={{ scale: 0.9, opacity: 0 }}
            animate={{ scale: 1, opacity: 1 }}
            exit={{ scale: 0.9, opacity: 0 }}
            className="w-full max-w-2xl max-h-[90vh] overflow-y-auto"
            onClick={(e) => e.stopPropagation()}
          >
            <Card className="glass">
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-4">
                <CardTitle className="text-xl font-semibold">
                  Edit Vulnerability
                </CardTitle>
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={onClose}
                  className="h-8 w-8 p-0"
                >
                  <X className="h-4 w-4" />
                </Button>
              </CardHeader>
              <CardContent>
                <form onSubmit={handleSubmit} className="space-y-4">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <label className="text-sm font-medium mb-2 block">Title</label>
                      <Input
                        value={form.title}
                        onChange={(e) => handleInputChange('title', e.target.value)}
                        placeholder="Vulnerability title"
                        className="bg-background text-foreground border-input placeholder:text-muted-foreground"
                        required
                      />
                    </div>
                    <div>
                      <label className="text-sm font-medium mb-2 block">CVE ID</label>
                      <Input
                        value={form.cve_id}
                        onChange={(e) => handleInputChange('cve_id', e.target.value)}
                        placeholder="CVE-2024-XXXX"
                        className="bg-background text-foreground border-input placeholder:text-muted-foreground"
                      />
                    </div>
                  </div>

                  <div>
                    <label className="text-sm font-medium mb-2 block">Description</label>
                    <textarea
                      value={form.description}
                      onChange={(e) => handleInputChange('description', e.target.value)}
                      placeholder="Describe the vulnerability..."
                      className="w-full p-3 border rounded-md resize-none h-24 bg-background text-foreground border-input placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:border-transparent"
                      required
                    />
                  </div>

                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <div>
                      <label className="text-sm font-medium mb-2 block">Severity</label>
                      <div className="flex flex-wrap gap-2">
                        {['Critical', 'High', 'Medium', 'Low'].map((sev) => (
                          <Badge
                            key={sev}
                            className={`cursor-pointer ${form.severity === sev ? getSeverityColor(sev) : 'bg-gray-200 text-gray-700'}`}
                            onClick={() => handleInputChange('severity', sev)}
                          >
                            {sev}
                          </Badge>
                        ))}
                      </div>
                    </div>
                    <div>
                      <label className="text-sm font-medium mb-2 block">Status</label>
                      <div className="flex flex-wrap gap-2">
                        {['Open', 'Mitigating', 'Fixed', 'Accepted'].map((stat) => (
                          <Badge
                            key={stat}
                            className={`cursor-pointer ${form.status === stat ? getStatusColor(stat) : 'bg-gray-200 text-gray-700'}`}
                            onClick={() => handleInputChange('status', stat)}
                          >
                            {stat}
                          </Badge>
                        ))}
                      </div>
                    </div>
                    <div>
                      <label className="text-sm font-medium mb-2 block">Source</label>
                      <div className="flex flex-wrap gap-2">
                        {['internal', 'nvd', 'other'].map((src) => (
                          <Badge
                            key={src}
                            className={`cursor-pointer ${form.source === src ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-700'}`}
                            onClick={() => handleInputChange('source', src)}
                          >
                            {src}
                          </Badge>
                        ))}
                      </div>
                    </div>
                  </div>

                  <div>
                    <label className="text-sm font-medium mb-2 block">CVSS Vector</label>
                                          <Input
                        value={form.vector}
                        onChange={(e) => handleInputChange('vector', e.target.value)}
                        placeholder="CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H"
                        className="bg-background text-foreground border-input placeholder:text-muted-foreground"
                      />
                  </div>

                  <div className="flex justify-end space-x-2 pt-4">
                    <Button
                      type="button"
                      variant="outline"
                      onClick={onClose}
                      disabled={isSubmitting}
                    >
                      Cancel
                    </Button>
                    <Button
                      type="submit"
                      disabled={isSubmitting}
                      className="bg-blue-600 hover:bg-blue-700"
                    >
                      <Save className="h-4 w-4 mr-2" />
                      {isSubmitting ? 'Updating...' : 'Update Vulnerability'}
                    </Button>
                  </div>
                </form>
              </CardContent>
            </Card>
          </motion.div>
        </motion.div>
      )}
    </AnimatePresence>
  );
};
