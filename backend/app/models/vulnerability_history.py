from datetime import datetime
from app import db
import json

class VulnerabilityHistory(db.Model):
    __tablename__ = 'vulnerability_history'
    
    id = db.Column(db.Integer, primary_key=True)
    vulnerability_id = db.Column(db.Integer, db.ForeignKey('vulns.id'), nullable=False)
    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=True)
    username = db.Column(db.String(100), nullable=False)
    action = db.Column(db.String(50), nullable=False)  # CREATE, UPDATE, DELETE
    field_name = db.Column(db.String(100))  # Campo que cambi√≥
    old_value = db.Column(db.Text)  # Valor anterior
    new_value = db.Column(db.Text)  # Valor nuevo
    timestamp = db.Column(db.DateTime, default=datetime.utcnow, nullable=False)
    ip_address = db.Column(db.String(45))
    user_agent = db.Column(db.String(500))
    
    # Relationship
    vulnerability = db.relationship('Vulnerability', backref='history')
    user = db.relationship('User', backref='vulnerability_changes')
    
    def __init__(self, vulnerability_id, user_id, username, action, field_name=None, 
                 old_value=None, new_value=None, ip_address=None, user_agent=None):
        self.vulnerability_id = vulnerability_id
        self.user_id = user_id
        self.username = username
        self.action = action
        self.field_name = field_name
        self.old_value = old_value
        self.new_value = new_value
        self.ip_address = ip_address
        self.user_agent = user_agent
    
    def to_dict(self):
        return {
            'id': self.id,
            'vulnerability_id': self.vulnerability_id,
            'user_id': self.user_id,
            'username': self.username,
            'action': self.action,
            'field_name': self.field_name,
            'old_value': self.old_value,
            'new_value': self.new_value,
            'timestamp': self.timestamp.isoformat() if self.timestamp else None,
            'ip_address': self.ip_address,
            'user_agent': self.user_agent
        }
    
    @staticmethod
    def log_change(vulnerability_id, user_id, username, action, field_name=None, 
                   old_value=None, new_value=None, ip_address=None, user_agent=None):
        """Static method to create history entry"""
        try:
            history_entry = VulnerabilityHistory(
                vulnerability_id=vulnerability_id,
                user_id=user_id,
                username=username,
                action=action,
                field_name=field_name,
                old_value=old_value,
                new_value=new_value,
                ip_address=ip_address,
                user_agent=user_agent
            )
            db.session.add(history_entry)
            db.session.commit()
            return history_entry
        except Exception as e:
            db.session.rollback()
            print(f"Error creating vulnerability history: {e}")
            return None
    
    @staticmethod
    def compare_objects(old_obj, new_obj, user_id, username, action, ip_address=None, user_agent=None):
        """Compare two vulnerability objects and log all changes"""
        if not old_obj or not new_obj:
            return None
            
        changes = []
        
        # Fields to track
        fields_to_track = [
            'title', 'description', 'cvss_vector', 'base_score', 'temporal_score', 
            'environmental_score', 'severity', 'status', 'source', 'references'
        ]
        
        for field in fields_to_track:
            old_value = getattr(old_obj, field, None)
            new_value = getattr(new_obj, field, None)
            
            # Convert to string for comparison
            old_str = str(old_value) if old_value is not None else None
            new_str = str(new_value) if new_value is not None else None
            
            if old_str != new_str:
                VulnerabilityHistory.log_change(
                    vulnerability_id=new_obj.id,
                    user_id=user_id,
                    username=username,
                    action=action,
                    field_name=field,
                    old_value=old_str,
                    new_value=new_str,
                    ip_address=ip_address,
                    user_agent=user_agent
                )
                changes.append(field)
        
        return changes
